(()=>{"use strict";var e,r,n={34:()=>{var e;document.body.appendChild(((e=document.createElement("pre")).innerHTML=["zhangweichao","5 cubed is equal to "+(5,125)].join("\n\n"),e))}},t={};function o(e){if(t[e])return t[e].exports;var r=t[e]={exports:{}},i={id:e,module:r,factory:n[e],require:o};return o.i.forEach((function(e){e(i)})),r=i.module,i.factory.call(r.exports,r,r.exports,i.require),r.exports}o.m=n,o.c=t,o.i=[],o.hu=e=>e+"."+o.h()+".hot-update.js",o.hmrF=()=>"app."+o.h()+".hot-update.json",o.h=()=>"7991f049507158bcfaf1",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),e={},r="project-webpack:",o.l=(n,t,i,c)=>{if(e[n])e[n].push(t);else{var d,a;if(void 0!==i)for(var u=document.getElementsByTagName("script"),s=0;s<u.length;s++){var l=u[s];if(l.getAttribute("src")==n||l.getAttribute("data-webpack")==r+i){d=l;break}}d||(a=!0,(d=document.createElement("script")).charset="utf-8",d.timeout=120,o.nc&&d.setAttribute("nonce",o.nc),d.setAttribute("data-webpack",r+i),d.src=n),e[n]=[t];var p=(r,t)=>{d.onerror=d.onload=null,clearTimeout(f);var o=e[n];if(delete e[n],d.parentNode&&d.parentNode.removeChild(d),o&&o.forEach((e=>e(t))),r)return r(t)},f=setTimeout(p.bind(null,void 0,{type:"timeout",target:d}),12e4);d.onerror=p.bind(null,d.onerror),d.onload=p.bind(null,d.onload),a&&document.head.appendChild(d)}},(()=>{var e,r,n,t,i={},c=o.c,d=[],a=[],u="idle";function s(e){u=e;for(var r=0;r<a.length;r++)a[r].call(null,e)}function l(e){if(0===r.length)return e();var n=r;return r=[],Promise.all(n).then((function(){return l(e)}))}function p(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return s("check"),o.hmrM().then((function(t){if(!t)return s(v()?"ready":"idle"),null;s("prepare");var i=[];return r=[],n=[],Promise.all(Object.keys(o.hmrC).reduce((function(e,r){return o.hmrC[r](t.c,t.r,t.m,e,n,i),e}),[])).then((function(){return l((function(){return e?h(e):(s("ready"),i)}))}))}))}function f(e){return"ready"!==u?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):h(e)}function h(e){e=e||{},v();var r=n.map((function(r){return r(e)}));n=void 0;var o,i=r.map((function(e){return e.error})).filter(Boolean);if(i.length>0)return s("abort"),Promise.resolve().then((function(){throw i[0]}));s("dispose"),r.forEach((function(e){e.dispose&&e.dispose()})),s("apply");var c=function(e){o||(o=e)},d=[];return r.forEach((function(e){if(e.apply){var r=e.apply(c);if(r)for(var n=0;n<r.length;n++)d.push(r[n])}})),o?(s("fail"),Promise.resolve().then((function(){throw o}))):t?h(e).then((function(e){return d.forEach((function(r){e.indexOf(r)<0&&e.push(r)})),e})):(s("idle"),Promise.resolve(d))}function v(){if(t)return n||(n=[]),Object.keys(o.hmrI).forEach((function(e){t.forEach((function(r){o.hmrI[e](r,n)}))})),t=void 0,!0}o.hmrD=i,o.i.push((function(h){var v,m,y,g=h.module,b=function(n,t){var o=c[t];if(!o)return n;var i=function(r){if(o.hot.active){if(c[r]){var i=c[r].parents;-1===i.indexOf(t)&&i.push(t)}else d=[t],e=r;-1===o.children.indexOf(r)&&o.children.push(r)}else console.warn("[HMR] unexpected require("+r+") from disposed module "+t),d=[];return n(r)},a=function(e){return{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(r){n[e]=r}}};for(var p in n)Object.prototype.hasOwnProperty.call(n,p)&&"e"!==p&&Object.defineProperty(i,p,a(p));return i.e=function(e){return function(e){switch(u){case"ready":return s("prepare"),r.push(e),l((function(){s("ready")})),e;case"prepare":return r.push(e),e;default:return e}}(n.e(e))},i}(h.require,h.id);g.hot=(v=h.id,m=g,y={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==v,_requireSelf:function(){d=m.parents.slice(),e=v,o(v)},active:!0,accept:function(e,r){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)y._acceptedDependencies[e[n]]=r||function(){};else y._acceptedDependencies[e]=r||function(){}},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)y._declinedDependencies[e[r]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=y._disposeHandlers.indexOf(e);r>=0&&y._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,u){case"idle":n=[],Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](v,n)})),s("ready");break;case"ready":Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](v,n)}));break;case"prepare":case"check":case"dispose":case"apply":(t=t||[]).push(v)}},check:p,apply:f,status:function(e){if(!e)return u;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var r=a.indexOf(e);r>=0&&a.splice(r,1)},data:i[v]},e=void 0,y),g.parents=d,g.children=[],d=[],h.require=b})),o.hmrC={},o.hmrI={}})(),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var r=o.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var n=r.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e,r,n,t,i={143:0},c={};function d(e){return new Promise(((r,n)=>{c[e]=r;var t=o.p+o.hu(e),i=new Error;o.l(t,(r=>{if(c[e]){c[e]=void 0;var t=r&&("load"===r.type?"missing":r.type),o=r&&r.target&&r.target.src;i.message="Loading hot update chunk "+e+" failed.\n("+t+": "+o+")",i.name="ChunkLoadError",i.type=t,i.request=o,n(i)}}))}))}function a(c){function d(e){for(var r=[e],n={},t=r.map((function(e){return{chain:[e],id:e}}));t.length>0;){var i=t.pop(),c=i.id,d=i.chain,u=o.c[c];if(u&&(!u.hot._selfAccepted||u.hot._selfInvalidated)){if(u.hot._selfDeclined)return{type:"self-declined",chain:d,moduleId:c};if(u.hot._main)return{type:"unaccepted",chain:d,moduleId:c};for(var s=0;s<u.parents.length;s++){var l=u.parents[s],p=o.c[l];if(p){if(p.hot._declinedDependencies[c])return{type:"declined",chain:d.concat([l]),moduleId:c,parentId:l};-1===r.indexOf(l)&&(p.hot._acceptedDependencies[c]?(n[l]||(n[l]=[]),a(n[l],[c])):(delete n[l],r.push(l),t.push({chain:d.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:n}}function a(e,r){for(var n=0;n<r.length;n++){var t=r[n];-1===e.indexOf(t)&&e.push(t)}}o.f&&delete o.f.jsonpHmr,e=void 0;var u={},s=[],l={},p=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var f in r)if(o.o(r,f)){var h,v=r[f],m=!1,y=!1,g=!1,b="";switch((h=v?d(f):{type:"disposed",moduleId:f}).chain&&(b="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":c.onDeclined&&c.onDeclined(h),c.ignoreDeclined||(m=new Error("Aborted because of self decline: "+h.moduleId+b));break;case"declined":c.onDeclined&&c.onDeclined(h),c.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+b));break;case"unaccepted":c.onUnaccepted&&c.onUnaccepted(h),c.ignoreUnaccepted||(m=new Error("Aborted because "+f+" is not accepted"+b));break;case"accepted":c.onAccepted&&c.onAccepted(h),y=!0;break;case"disposed":c.onDisposed&&c.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(m)return{error:m};if(y)for(f in l[f]=v,a(s,h.outdatedModules),h.outdatedDependencies)o.o(h.outdatedDependencies,f)&&(u[f]||(u[f]=[]),a(u[f],h.outdatedDependencies[f]));g&&(a(s,[h.moduleId]),l[f]=p)}r=void 0;for(var w,E=[],_=0;_<s.length;_++){var D=s[_];o.c[D]&&o.c[D].hot._selfAccepted&&l[D]!==p&&!o.c[D].hot._selfInvalidated&&E.push({module:D,require:o.c[D].hot._requireSelf,errorHandler:o.c[D].hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete i[e]})),n=void 0;for(var r,t=s.slice();t.length>0;){var c=t.pop(),d=o.c[c];if(d){var a={},l=d.hot._disposeHandlers;for(_=0;_<l.length;_++)l[_].call(null,a);for(o.hmrD[c]=a,d.hot.active=!1,delete o.c[c],delete u[c],_=0;_<d.children.length;_++){var p=o.c[d.children[_]];p&&(e=p.parents.indexOf(c))>=0&&p.parents.splice(e,1)}}}for(var f in u)if(o.o(u,f)&&(d=o.c[f]))for(w=u[f],_=0;_<w.length;_++)r=w[_],(e=d.children.indexOf(r))>=0&&d.children.splice(e,1)},apply:function(e){for(var r in l)o.o(l,r)&&(o.m[r]=l[r]);for(var n=0;n<t.length;n++)t[n](o);for(var i in u)if(o.o(u,i)){var d=o.c[i];if(d){w=u[i];for(var a=[],p=[],f=0;f<w.length;f++){var h=w[f],v=d.hot._acceptedDependencies[h];if(v){if(-1!==a.indexOf(v))continue;a.push(v),p.push(h)}}for(var m=0;m<a.length;m++)try{a[m].call(null,w)}catch(r){c.onErrored&&c.onErrored({type:"accept-errored",moduleId:i,dependencyId:p[m],error:r}),c.ignoreErrored||e(r)}}}for(var y=0;y<E.length;y++){var g=E[y],b=g.module;try{g.require(b)}catch(r){if("function"==typeof g.errorHandler)try{g.errorHandler(r)}catch(n){c.onErrored&&c.onErrored({type:"self-accept-error-handler-errored",moduleId:b,error:n,originalError:r}),c.ignoreErrored||e(n),e(r)}else c.onErrored&&c.onErrored({type:"self-accept-errored",moduleId:b,error:r}),c.ignoreErrored||e(r)}}return s}}}self.webpackHotUpdateproject_webpack=(e,n,i)=>{for(var d in n)o.o(n,d)&&(r[d]=n[d]);i&&t.push(i),c[e]&&(c[e](),c[e]=void 0)},o.hmrI.jsonp=function(e,i){r||(r={},t=[],n=[],i.push(a)),o.o(r,e)||(r[e]=o.m[e])},o.hmrC.jsonp=function(c,u,s,l,p,f){p.push(a),e={},n=u,r=s.reduce((function(e,r){return e[r]=!1,e}),{}),t=[],c.forEach((function(r){o.o(i,r)&&void 0!==i[r]&&(l.push(d(r)),e[r]=!0)})),o.f&&(o.f.jsonpHmr=function(r,n){e&&!o.o(e,r)&&o.o(i,r)&&void 0!==i[r]&&(n.push(d(r)),e[r]=!0)})},o.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(o.p+o.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),o(34)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,